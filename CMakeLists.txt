cmake_minimum_required(VERSION 3.3)

# Solution
project(xtd)
set(EXPORT_PROJECT_NAME ${PROJECT_NAME})

# Options
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
if (NOT DEFINED EXPORT_PROJECT_NAME)
  set(EXPORT_PROJECT_NAME ${PROJECT_NAME})
endif ()

# Add compile and link flags
option(XTD_ENABLE_COMPILER_OPTION_WARNINGS_TO_ALL "Enable compiler option warnings to all" ON)
option(XTD_ENABLE_COMPILER_OPTION_WARNINGS_AS_ERRORS "Enable compiler option warnings as errors" ON)
if (XTD_ENABLE_COMPILER_OPTION_WARNINGS_TO_ALL)
  if (MSVC)
    add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
    add_compile_options(/W4 /wd4100 /wd4458 /wd4996)
  else()
    add_compile_options(-Wall -Wextra -Wno-unused-parameter -pedantic)
  endif()
endif()
if (XTD_ENABLE_COMPILER_OPTION_WARNINGS_AS_ERRORS)
  if (MSVC)
    add_compile_options(/WX)
  else()
    add_compile_options(-Werror)
  endif()
endif()

# Code coverage
option(ENABLE_COVERAGE "Enable code coverage" OFF)
if (ENABLE_COVERAGE AND UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g --coverage")
  set(CMAKE_LINKER_FLAGS "${CMAKE_LINKER_FLAGS} --coverage")
endif ()

# Projects
add_subdirectory(src)

# Tests projects
option(ENABLE_TESTS "Enable tests" OFF)
if (ENABLE_TESTS)
  enable_testing()
  add_subdirectory(tests)
endif ()

# install
if (CMAKE_SOURCE_DIR STREQUAL CMAKE_CURRENT_SOURCE_DIR)
  set (CMAKE_CONFIG
    "include(CMakeFindDependencyMacro)\n"
    "include(\"\${CMAKE_CURRENT_LIST_DIR}/${PROJECT_NAME}.cmake\")\n"
    "include(\"\${CMAKE_CURRENT_LIST_DIR}/xtd_commands.cmake\")\n"
    "\n"
    "set(${PROJECT_NAME}_INCLUDE_DIRS \"\${CMAKE_CURRENT_LIST_DIR}/../include\")\n"
    "set(${PROJECT_NAME}_LIBRARIES_DIRS \"\${CMAKE_CURRENT_LIST_DIR}/../lib\")\n"
    "set(${PROJECT_NAME}_LIBRARIES ${PROJECT_NAME})\n"
    "set(${PROJECT_NAME}_FOUND TRUE)\n"
  )

  set (CMAKE_CONFIG_WITH_WXWIDGETS
    "include(CMakeFindDependencyMacro)\n"
    "include(\"\${CMAKE_CURRENT_LIST_DIR}/${PROJECT_NAME}.cmake\")\n"
    "include(\"\${CMAKE_CURRENT_LIST_DIR}/xtd_commands.cmake\")\n"
    "\n"
    "if (APPLE)\n"
    "#  find_package(wxWidgets REQUIRED COMPONENTS base core aui html gl net qa richtext webview xml xrc)\n"
    "  find_package(wxWidgets REQUIRED COMPONENTS base core aui html net qa richtext webview xml xrc)\n"
    "elseif (UNIX)\n"
    "  find_package(wxWidgets REQUIRED COMPONENTS base core aui html gl net qa richtext xml xrc)\n"
    "else ()\n"
    "  find_package(wxWidgets REQUIRED COMPONENTS base core aui html gl net qa richtext webview xml xrc)\n"
    "endif ()\n"
    "\n"
    "set(${PROJECT_NAME}_INCLUDE_DIRS \"\${CMAKE_CURRENT_LIST_DIR}/../include\")\n"
    "set(${PROJECT_NAME}_LIBRARIES_DIRS \"\${CMAKE_CURRENT_LIST_DIR}/../lib\")\n"
    "set(${PROJECT_NAME}_LIBRARIES ${PROJECT_NAME})\n"
    "set(${PROJECT_NAME}_FOUND TRUE)\n"
  )

  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake ${CMAKE_CONFIG})
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/xtd.consoleConfig.cmake ${CMAKE_CONFIG})
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/xtd.delegatesConfig.cmake ${CMAKE_CONFIG})
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/xtd.diagnosticsConfig.cmake ${CMAKE_CONFIG})
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/xtd.drawingConfig.cmake ${CMAKE_CONFIG_WITH_WXWIDGETS})
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/xtd.coreConfig.cmake ${CMAKE_CONFIG})
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake ${CMAKE_CONFIG})
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/xtd.formsConfig.cmake ${CMAKE_CONFIG_WITH_WXWIDGETS})
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/xtd.ioConfig.cmake ${CMAKE_CONFIG})
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/xtd.propertiesConfig.cmake ${CMAKE_CONFIG})
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/xtd.stringsConfig.cmake ${CMAKE_CONFIG})
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/xtd.tunitConfig.cmake ${CMAKE_CONFIG})

  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake DESTINATION cmake)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/xtd.consoleConfig.cmake DESTINATION cmake)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/xtd.delegatesConfig.cmake DESTINATION cmake)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/xtd.diagnosticsConfig.cmake DESTINATION cmake)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/xtd.drawingConfig.cmake DESTINATION cmake)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/xtd.coreConfig.cmake DESTINATION cmake)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/xtd.formsConfig.cmake DESTINATION cmake)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/xtd.ioConfig.cmake DESTINATION cmake)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/xtd.propertiesConfig.cmake DESTINATION cmake)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/xtd.stringsConfig.cmake DESTINATION cmake)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/xtd.tunitConfig.cmake DESTINATION cmake)
  install(FILES src/xtd_core/scripts/cmake/xtd_commands.cmake DESTINATION cmake)
  install(EXPORT ${PROJECT_NAME} DESTINATION cmake)
  option(XTD_ENABLE_INSTALL_RESOURCES "Enable install resources" ON)
  if (XTD_ENABLE_INSTALL_RESOURCES)
    install(DIRECTORY src/xtd_drawing/resources DESTINATION share/xtd)
    install(DIRECTORY src/xtd_forms/resources DESTINATION share/xtd)
    install(DIRECTORY src/xtd_forms/docs/pictures/examples/. DESTINATION share/xtd/resources/pictures/examples/xtd_forms)
  endif ()
  option(XTD_ENABLE_INSTALL_EXAMPLES "Enable install examples" ON)
  if (XTD_ENABLE_INSTALL_EXAMPLES)
    install(DIRECTORY src/xtd_console/examples/. DESTINATION share/xtd/examples/xtd_console)
    install(DIRECTORY src/xtd_forms/examples/. DESTINATION share/xtd/examples/xtd_forms)
    install(DIRECTORY src/xtd_tunit/examples/. DESTINATION share/xtd/examples/xtd_tunit)
  endif ()
endif ()

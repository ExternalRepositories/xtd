#pragma region xtd generated code
// This code was generated by CMake script.
//
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.

#pragma once

#include <xtd/environment.h>
#include <xtd/forms/component.h>
#include <xtd/forms/settings.h>
#include <xtd/strings.h>

namespace xtdc_gui::properties {
  class settings : public xtd::forms::component {
  public:
    settings() : ::xtdc_gui::properties::settings(true) {}
    
    static ::xtdc_gui::properties::settings& default_settings() {
      static ::xtdc_gui::properties::settings default_settings;
      return default_settings;
    }
    
    bool auto_close() const {return auto_close_;}
    void auto_close(bool value) {auto_close_ = value;}
    
    std::string create_propject_folder() const {return create_propject_folder_;}
    void create_propject_folder(const std::string& value) {create_propject_folder_ = value;}
    
    std::string open_propject_folder() const {return open_propject_folder_;}
    void open_propject_folder(const std::string& value) {open_propject_folder_ = value;}
    
    std::vector<std::string> open_recent_propjects() const {return open_recent_propjects_;}
    void open_recent_propjects(const std::vector<std::string>& value) {open_recent_propjects_ = value;}
    
    std::vector<std::string> create_recent_propjects() const {return create_recent_propjects_;}
    void create_recent_propjects(const std::vector<std::string>& value) {create_recent_propjects_ = value;}

    size_t language_index() const {return language_index_;}
    void language_index(size_t value) {language_index_ = value;}
    
    size_t platform_index() const {return platform_index_;}
    void platform_index(size_t value) {platform_index_ = value;}
    
    size_t type_index() const {return type_index_;}
    void type_index(size_t value) {type_index_ = value;}
    
    void reload() {
      auto_close_ = settings_.read("auto_close", auto_close_);
      create_propject_folder_ = settings_.read("create_propject_folder", create_propject_folder_);
      open_propject_folder_ = settings_.read("open_propject_folder", open_propject_folder_);
      open_recent_propjects_ = xtd::strings::split(settings_.read("open_recent_propjects", xtd::strings::join(";", open_recent_propjects_)), {';'});
      create_recent_propjects_ = xtd::strings::split(settings_.read("create_recent_propjects", xtd::strings::join(";", create_recent_propjects_)), {';'});
      language_index_ = settings_.read("language_index", language_index_);
      platform_index_ = settings_.read("platform_index", platform_index_);
      type_index_ = settings_.read("type_index", type_index_);
    }
    
    void reset() {
      settings_.reset();
      *this = settings(false);
      reload();
    }
    
    void save() {
      settings_.write("auto_close", auto_close_);
      settings_.write("create_propject_folder", create_propject_folder_);
      settings_.write("open_propject_folder", open_propject_folder_);
      settings_.write("open_recent_propjects", xtd::strings::join(";", open_recent_propjects_));
      settings_.write("create_recent_propjects", xtd::strings::join(";", create_recent_propjects_));
      settings_.write("language_index", language_index_);
      settings_.write("platform_index", platform_index_);
      settings_.write("type_index", type_index_);
      settings_.save();
    }
    
  private:
    settings(bool load) {if (load) reload();}
    xtd::forms::settings settings_;
    bool auto_close_ {true};
    std::string create_propject_folder_ {xtd::environment::get_folder_path(xtd::environment::special_folder::home)};
    std::string open_propject_folder_ {xtd::environment::get_folder_path(xtd::environment::special_folder::home)};
    std::vector<std::string> open_recent_propjects_;
    std::vector<std::string> create_recent_propjects_;
    size_t language_index_ = 1;
    size_t platform_index_  = xtd::environment::os_version().is_windows_platform() ? 1 : xtd::environment::os_version().is_linux_platform() ? 2 : 3;
    size_t type_index_ = 0;
  };
}

#pragma endregion
